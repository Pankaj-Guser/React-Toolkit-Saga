{"version":3,"sources":["components/Table/ActionItems.js","components/EmptyComp.js","components/Table/Table.js"],"names":["ActionItemsComp","props","dispatch","useDispatch","tableData","useSelector","state","TableData","selectedKeys","className","type","onClick","data","tabledata","newData","key","parseInt","length","toString","toggleText","cells","id","title","tableActions","ADD_ROW","payload","filter","item","indexOf","REMOVE_ROW","EmptyComp","TableComp","tableHeaderData","mockData","tableHeaderMockData","useState","setSelectedKeys","handleRowToggle","event","metaData","preventDefault","Utils","toggleArrayValue","summaryId","summary","aria-multiselectable","rowStyle","numberOfColumns","cellPaddingStyle","dividerStyle","headerData","selectAllColumn","checkLabel","map","childItem","cell","children","bodyData","rows","rowData","createCell","toggleAction","onToggle","isToggled","toggleLabel","createRow","createRows","ActionItems"],"mappings":"kNA+CeA,MA1Cf,SAAyBC,GACvB,IAAMC,EAAWC,cACXC,EAAYC,aAAY,SAACC,GAAD,OAAWA,EAAMC,aACxCC,EAAgBP,EAAhBO,aAyBP,OACE,oCACE,yBAAKC,UAAU,aACb,4BAAQC,KAAK,SAASC,QApBT,WACjB,IAAIC,EAAOR,EAAUS,UAEfC,EAAU,CACdC,KAFkBC,SAASJ,EAAKA,EAAKK,OAAS,GAAGF,KAAO,GAEvCG,WACjBC,WAAY,SACZC,MAAO,CACL,CAAEL,IAAK,SAAUM,GAAI,WAAYC,MAAO,SACxC,CAAEP,IAAK,SAAUM,GAAI,WAAYC,MAAO,WACxC,CAAEP,IAAK,SAAUM,GAAI,WAAYC,MAAO,gBACxC,CAAEP,IAAK,SAAUM,GAAI,WAAYC,MAAO,cAI5CpB,EAAS,CAAEQ,KAAMa,IAAaC,QAASC,QAAQ,GAAD,mBAAMrB,EAAUS,WAAhB,CAA2BC,QAMrE,OAGA,4BAAQJ,KAAK,SAASC,QA7BL,WACrB,IAAIC,EAAOR,EAAUS,UACrBD,EAAOA,EAAKc,QAAO,SAACC,GAAD,OAA8C,IAApCnB,EAAaoB,QAAQD,EAAKZ,QACvDb,EAAS,CAAEQ,KAAMa,IAAaM,WAAYJ,QAASb,MA0B/C,a,iBCrCO,SAASkB,EAAU7B,GAEhC,OACE,kDCEW,SAAS8B,EAAU9B,GAChC,IA6BuBW,EA7BfR,EAAcH,EAAdG,UAEF4B,EAAkBC,IAASC,oBASjC,EAAwCC,mBAAS,IAAjD,mBAAO3B,EAAP,KAAqB4B,EAArB,KACMC,EAAkB,SAACC,EAAOC,GAC9BD,EAAME,iBACNJ,EAAgBK,QAAMC,iBAAiBlC,EAAc+B,EAASxB,OAiBhE,OACE,6BACGX,EAAUS,UAAUI,OAAS,EAC5B,6BACE,kBAAC,IAAD,CACE0B,UAAU,uBACVC,QAAQ,gEACRC,wBAAA,EACAC,SAAS,SACTC,gBAAiB,EACjBC,iBAAiB,WACjBC,aAAa,OACbC,WAAY,CACVC,gBAAiB,CACfC,WAAY,mBAEdhC,OAlBWR,EAkBUoB,EAjB/BpB,EAAKyC,KAAI,SAACC,GAAD,MAvBqB,CAAEvC,KAAZwC,EAuBiBD,GAvBKvC,IAAKyC,SAAUD,EAAKC,UAA3C,IAACD,OA0CZE,SAAU,CACR,CACEC,KAvBK,SAAC9C,GAAD,OAAUA,EAAKyC,KAAI,SAACC,GAAD,OAXpB,SAACK,GAAD,MAAc,CAC9B5C,IAAK4C,EAAQ5C,IACbK,OAVyBA,EAUAuC,EAAQvC,MAVEA,EAAMiC,KAAI,SAACE,GAAD,OAH5B,SAACA,GAAD,MAAW,CAAExC,IAAKwC,EAAKxC,IAAKyC,SAAUD,EAAKjC,OAGLsC,CAAWL,OAWlEM,aAAc,CACZtB,SAAU,CAAExB,IAAK4C,EAAQ5C,KACzB+C,SAAUzB,EACV0B,UAAWvD,EAAaoB,QAAQ+B,EAAQ5C,MAAQ,EAChDiD,YAAaL,EAAQxC,aAfC,IAACC,EAmB0B6C,CAAUX,MAuB3CY,CAAW9D,EAAUS,eAIjC,kBAACsD,EAAD,CAAiB3D,aAAcA,KAGjC,kBAACsB,EAAD,S","file":"static/js/4.7b0d7338.chunk.js","sourcesContent":["import React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport tableActions from \"../../actions/tableActions\"\nimport \"./table.scss\";\n\nfunction ActionItemsComp(props) {\n  const dispatch = useDispatch();\n  const tableData = useSelector((state) => state.TableData);\n  const {selectedKeys} = props\n  \n  const RemoveSelected = () => {\n    let data = tableData.tabledata;\n    data = data.filter((item) => selectedKeys.indexOf(item.key) === -1);\n    dispatch({ type: tableActions.REMOVE_ROW, payload: data });\n  };\n\n  const AddElement = () => {\n    let data = tableData.tabledata;\n    const latestIndex = parseInt(data[data.length - 1].key) + 1;\n    const newData = {\n      key: latestIndex.toString(),\n      toggleText: \"toggle\",\n      cells: [\n        { key: \"cell-0\", id: \"toggle-0\", title: \"Name1\" },\n        { key: \"cell-1\", id: \"toggle-1\", title: \"Address\" },\n        { key: \"cell-2\", id: \"toggle-2\", title: \"Phone Number\" },\n        { key: \"cell-3\", id: \"toggle-3\", title: \"Email Id\" },\n      ],\n    };\n\n    dispatch({ type: tableActions.ADD_ROW, payload: [...tableData.tabledata, newData] });\n  };\n\n  return (\n    <>\n      <div className=\"btn-space\">\n        <button type=\"button\" onClick={AddElement}>\n          Add\n        </button>\n        <button type=\"button\" onClick={RemoveSelected}>\n          Remove\n        </button>\n      </div>\n    </>\n  );\n}\n\nexport default ActionItemsComp;\n","import React from \"react\";\n\nexport default function EmptyComp(props) {\n  \n  return (\n    <div >\n      No Record to show\n    </div>\n  );\n}\n","import React, { useState} from \"react\";\nimport mockData from \"../../mockData/tableMockData\";\nimport ActionItemsComp from \"./ActionItems\";\nimport Table, { Utils } from \"terra-table\";\nimport EmptyComp from \"../EmptyComp\";\nimport \"./table.scss\";\n\nexport default function TableComp(props) {\n  const { tableData } = props;\n\n  const tableHeaderData = mockData.tableHeaderMockData;\n\n  // let maxSectionCount = tableData.tabledata.length;\n\n  const createCell = (cell) => ({ key: cell.key, children: cell.title });\n  const createHeader = (cell) => ({ key: cell.key, children: cell.children });\n\n  const createCellsForRow = (cells) => cells.map((cell) => createCell(cell));\n\n  const [selectedKeys, setSelectedKeys] = useState([]);\n  const handleRowToggle = (event, metaData) => {\n    event.preventDefault();\n    setSelectedKeys(Utils.toggleArrayValue(selectedKeys, metaData.key));\n  };\n\n  const createRow = (rowData) => ({\n    key: rowData.key,\n    cells: createCellsForRow(rowData.cells),\n    toggleAction: {\n      metaData: { key: rowData.key },\n      onToggle: handleRowToggle,\n      isToggled: selectedKeys.indexOf(rowData.key) >= 0,\n      toggleLabel: rowData.toggleText,\n    },\n  });\n\n  const createRows = (data) => data.map((childItem) => createRow(childItem));\n  const createHeaders = (data) =>\n    data.map((childItem) => createHeader(childItem));\n  return (\n    <div>\n      {tableData.tabledata.length > 0 ? (\n        <div>\n          <Table\n            summaryId=\"example-multi-select\"\n            summary=\"This table shows an implementation of multiple row selection.\"\n            aria-multiselectable\n            rowStyle=\"toggle\"\n            numberOfColumns={4}\n            cellPaddingStyle=\"standard\"\n            dividerStyle=\"both\"\n            headerData={{\n              selectAllColumn: {\n                checkLabel: \"Multi Selection\",\n              },\n              cells: createHeaders(tableHeaderData),\n            }}\n            bodyData={[\n              {\n                rows: createRows(tableData.tabledata),\n              },\n            ]}\n          />\n          <ActionItemsComp selectedKeys={selectedKeys} />\n        </div>\n      ) : (\n        <EmptyComp />\n      )}\n    </div>\n  );\n}\n"],"sourceRoot":""}