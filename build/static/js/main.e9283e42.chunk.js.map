{"version":3,"sources":["actions/tableActions.js","Components/Table/Table.js","Containers/ListTodo.js","reducers/tableDataReducer.js","reducers/rootReducer.js","utils/todoApi.js","saga.js","store.js","App.js","index.js"],"names":["tableActions","FETCH_DATA_SAGA","GET_TABLE_DATA","ADD_ROW","REMOVE_ROW","TableComp","props","data","tableData","useState","selectedKeys","setSelectedKeys","handleRowToggle","event","metaData","preventDefault","Utils","toggleArrayValue","key","console","log","tabledata","length","summaryId","summary","aria-multiselectable","rowStyle","numberOfColumns","cellPaddingStyle","dividerStyle","headerData","selectAllColumn","checkLabel","cells","id","children","bodyData","rows","map","childItem","rowData","cell","title","createCell","isDisabled","canToggleArrayValue","toggleAction","onToggle","isToggled","indexOf","toggleLabel","toggleText","createRow","ListTodo","dispatch","useDispatch","useSelector","state","TableData","useEffect","type","addTableRow","newRow","payload","removeTableRow","DEFAULT_ALLERGIES_STATE","rootReducer","combineReducers","action","todoApi","callAPI","url","method","Axios","fetchDataSaga","rootSaga","todoApiUrl","call","result","put","takeEvery","middleware","sagaMiddleware","createSagaMiddleware","push","store","applyMiddleware","createStore","run","saga","App","exact","path","component","rootElement","document","getElementById","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.e9283e42.chunk.js","sourcesContent":["export const tableActions = {\n    FETCH_DATA_SAGA: \"FETCH_DATA_SAGA\",\n    GET_TABLE_DATA: \"GET_TABLE_DATA\",\n    ADD_ROW: \"ADD_ROW\",\n    REMOVE_ROW: \"REMOVE_ROW\"\n};\n  \nexport default tableActions;","import React, {\n  useState,\n} from \"react\";\n// import TableHeaderComp from \"./TableHeaderComp\";\n// import TableBodyComp from \"./TableBodyComp\";\n\nimport Table, {\n  Utils,\n} from \"terra-table\"\nimport \"./table.scss\";\n\nexport default function TableComp(props) {\n  const {\n    tableData,\n    // addTableRow,\n    // removeTableRow\n  } = props;\n\n  const maxSectionCount = 3;\n\n  const createCell = cell => \n  {\n\n  return({ key: cell.key, children: cell.title })\n  }\n\n\n  const createCellsForRow = cells => \n  {\n  cells.map(cell => createCell(cell))\n  }\n\n\n\n  const [selectedKeys, setSelectedKeys] = useState([]);\n\n  const handleRowToggle = (event, metaData) => {\n    event.preventDefault();\n    setSelectedKeys(Utils.toggleArrayValue(selectedKeys, metaData.key));\n  };\n\n  const createRow = rowData => {\n\n    return({\n      key: rowData.key,\n      cells: createCellsForRow(rowData.cells),\n      isDisabled: !Utils.canToggleArrayValue(maxSectionCount, selectedKeys, rowData.key),\n      toggleAction: {\n        metaData: { key: rowData.key },\n        onToggle: handleRowToggle,\n        isToggled: selectedKeys.indexOf(rowData.key) >= 0,\n        toggleLabel: rowData.toggleText,\n      },\n    })\n  }\n\n  const createRows = data => {\n    console.log(\"?????\", data)\n    data.map(childItem => createRow(childItem))}\n  console.log(\">>>>>><<<<<\", tableData, tableData.tabledata.length)\n\n  return (\n    <div>\n      {/* <table className=\"table\">\n        <TableHeaderComp\n          tableData = {tableData.tabledata}\n          addTableRow = {addTableRow}\n        />\n        <TableBodyComp\n          tableData = {tableData.tabledata}\n          removeTableRow = {removeTableRow}\n        />\n      </table> */}\n{tableData.tabledata.length > 0 &&\n\n      <Table\n        summaryId=\"example-multi-select\"\n        summary=\"This table shows an implementation of multiple row selection.\"\n        aria-multiselectable\n        rowStyle=\"toggle\"\n        numberOfColumns={4}\n        cellPaddingStyle=\"standard\"\n        dividerStyle=\"both\"\n        headerData={{\n          selectAllColumn: {\n            checkLabel: 'Multi Selection',\n          },\n          cells: [\n            { key: 'cell-0', id: 'toggle-0', children: 'Name' },\n            { key: 'cell-1', id: 'toggle-1', children: 'Address' },\n            { key: 'cell-2', id: 'toggle-2', children: 'Phone Number' },\n            { key: 'cell-3', id: 'toggle-3', children: 'Email Id' },\n          ],\n        }}\n        bodyData={[\n          {\n            rows: createRows(tableData.tabledata),\n          },\n        ]}\n      />\n}\n    </div>\n  );\n}","import React, {useEffect} from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { tableActions } from \"../actions/tableActions\";\r\nimport TableComp from \"../Components/Table/Table\";\r\n\r\nexport default function ListTodo() {\r\n  const dispatch = useDispatch();\r\n  const tableData = useSelector(state => state.TableData); \r\n\r\n  useEffect(()=>{\r\n    dispatch({ type: tableActions.FETCH_DATA_SAGA })\r\n  }, [dispatch])\r\n  \r\n  const addTableRow = (newRow) => {\r\n\r\n    dispatch({type: \"ADD_ROW\", payload: [...tableData.tabledata, newRow]})\r\n  }\r\n  const removeTableRow = (tableData) => {\r\n\r\n    dispatch({type: \"REMOVE_ROW\", payload: tableData})\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <TableComp \r\n        tableData = {tableData}\r\n        addTableRow = {addTableRow}\r\n        removeTableRow = {removeTableRow}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\n","import { tableActions }  from '../actions/tableActions';\n\nconst DEFAULT_ALLERGIES_STATE = {\n  tabledata: []\n};\n\n\nexport const TableData = (state = DEFAULT_ALLERGIES_STATE, action) => {\n  \n\n  switch (action.type) {\n\n    case tableActions.GET_TABLE_DATA:\n      return {\n        ...state,\n        tabledata: action.payload\n      };\n    case tableActions.ADD_ROW:\n      return {\n        ...state,\n        tabledata: action.payload\n      };\n    case tableActions.REMOVE_ROW:\n      return {\n        ...state,\n        tabledata: action.payload\n      }\n    default:\n      return state;\n  }\n};","import { combineReducers } from 'redux';\nimport {\n    TableData\n} from './tableDataReducer.js';\n\nconst rootReducer = combineReducers({\n    TableData\n});\n\nexport default rootReducer;","import Axios from \"axios\";\n\nconst callAPI = async ({ url, method, data }) => {\n    return await Axios({\n      url,\n      method,\n      data\n    });\n  };\n\nconst todoApi = {\n    callAPI\n}\n\nexport default todoApi;\n","import { call, takeEvery, put } from \"redux-saga/effects\";\r\nimport { tableActions } from \"./actions/tableActions\";\r\nimport todoApi from \"./utils/todoApi\";\r\nconst todoApiUrl = {\r\n  url: \"https://jsonplaceholder.typicode.com/todos/1\",\r\n}\r\nexport function* fetchDataSaga() {\r\n  try {\r\n    let result = yield call( ()=> todoApi.callAPI(todoApiUrl));\r\n    result.data = [\r\n      {key: 'cell-0', \r\n      toggleText: \"toggle\",\r\n      cells:[\r\n        { key: 'cell-0', id: 'toggle-0', title: 'Name' },\r\n        { key: 'cell-1', id: 'toggle-1', title: 'Address' },\r\n        { key: 'cell-2', id: 'toggle-2', title: 'Phone Number' },\r\n        { key: 'cell-3', id: 'toggle-3', title: 'Email Id' },\r\n      ]},\r\n      {key: 'cell-1', \r\n      toggleText: \"toggle\",\r\n      cells:[\r\n        { key: 'cell-0', id: 'toggle-0', title: 'Name' },\r\n        { key: 'cell-1', id: 'toggle-1', title: 'Address' },\r\n        { key: 'cell-2', id: 'toggle-2', title: 'Phone Number' },\r\n        { key: 'cell-3', id: 'toggle-3', title: 'Email Id' },\r\n      ]},\r\n      {key: 'cell-2', \r\n      toggleText: \"toggle\",\r\n      cells:[\r\n        { key: 'cell-0', id: 'toggle-0', title: 'Name' },\r\n        { key: 'cell-1', id: 'toggle-1', title: 'Address' },\r\n        { key: 'cell-2', id: 'toggle-2', title: 'Phone Number' },\r\n        { key: 'cell-3', id: 'toggle-3', title: 'Email Id' },\r\n      ]},\r\n      {key: 'cell-3', \r\n      toggleText: \"toggle\",\r\n      cells:[\r\n        { key: 'cell-0', id: 'toggle-0', title: 'Name' },\r\n        { key: 'cell-1', id: 'toggle-1', title: 'Address' },\r\n        { key: 'cell-2', id: 'toggle-2', title: 'Phone Number' },\r\n        { key: 'cell-3', id: 'toggle-3', title: 'Email Id' },\r\n      ]},\r\n      {key: 'cell-4', \r\n      toggleText: \"toggle\",\r\n      cells:[\r\n        { key: 'cell-0', id: 'toggle-0', title: 'Name' },\r\n        { key: 'cell-1', id: 'toggle-1', title: 'Address' },\r\n        { key: 'cell-2', id: 'toggle-2', title: 'Phone Number' },\r\n        { key: 'cell-3', id: 'toggle-3', title: 'Email Id' },\r\n      ]},\r\n      {key: 'cell-5', \r\n      toggleText: \"toggle\",\r\n      cells:[\r\n        { key: 'cell-0', id: 'toggle-0', title: 'Name' },\r\n        { key: 'cell-1', id: 'toggle-1', title: 'Address' },\r\n        { key: 'cell-2', id: 'toggle-2', title: 'Phone Number' },\r\n        { key: 'cell-3', id: 'toggle-3', title: 'Email Id' },\r\n      ]},\r\n    ]\r\n\r\n    // key: rowData.key,\r\n    //   cells: createCellsForRow(rowData.cells),\r\n    //   isDisabled: !Utils.canToggleArrayValue(maxSectionCount, selectedKeys, rowData.key),\r\n    //   toggleAction: {\r\n    //     metaData: { key: rowData.key },\r\n    //     onToggle: handleRowToggle,\r\n    //     isToggled: selectedKeys.indexOf(rowData.key) >= 0,\r\n    //     toggleLabel: rowData.toggleText,\r\n    yield put({type: \"GET_TABLE_DATA\", payload: result.data});\r\n  } catch (e) {\r\n    yield put({ type: \"TODO_FETCH_FAILED\" });\r\n  }\r\n}\r\n\r\nexport default function* rootSaga() {\r\n  yield takeEvery(tableActions.FETCH_DATA_SAGA, fetchDataSaga);\r\n}\r\n","import { createStore, applyMiddleware } from 'redux';\r\nimport rootReducer from './reducers/rootReducer';\r\nimport createSagaMiddleware from \"redux-saga\";\r\nimport saga from \"./saga\";  \r\n\r\nlet middleware = [];\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst storeData = {}\r\nmiddleware.push(sagaMiddleware);\r\nconst store = applyMiddleware(...middleware)(createStore)(\r\n  rootReducer,\r\n  storeData\r\n  );\r\n\r\nsagaMiddleware.run(saga);\r\n\r\n\r\nexport default store;\r\n","import React from \"react\";\nimport \"./styles.css\";\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport ListTodo from \"./Containers/ListTodo\";\nimport store from \"./store\";\n\n\nconst App = () => {\n  return (\n      <Provider store={store}>\n        <BrowserRouter>\n            <Switch>\n              <Route exact path='/' component={ListTodo} />\n            </Switch>\n        </BrowserRouter>\n      </Provider>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}